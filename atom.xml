<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Crawford, Software Engineer]]></title>
  <link href="http://kvcrawford.github.io/atom.xml" rel="self"/>
  <link href="http://kvcrawford.github.io/"/>
  <updated>2015-06-21T13:51:07-07:00</updated>
  <id>http://kvcrawford.github.io/</id>
  <author>
    <name><![CDATA[Kevin Crawford]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Architecting Maintainable, Reusable UIs in Angular: A Case Study]]></title>
    <link href="http://kvcrawford.github.io/blog/2015/06/20/architecting-maintainable-reusable-uis-in-angular/"/>
    <updated>2015-06-20T13:01:00-07:00</updated>
    <id>http://kvcrawford.github.io/blog/2015/06/20/architecting-maintainable-reusable-uis-in-angular</id>
    <content type="html"><![CDATA[<p>After spending substantial time working in-depth in Angular land, and with further influence from incursions into Flux &amp; React, I&#39;ve come to develop certain opinions on how to best architect non-trivial, data-driven UI flows in an Angular application.</p>

<p>What follows is a case study of a real-world UI problem, solved with the guidance of well-established principles and patterns in software design.</p>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder">Read the code on Github</a> &bull; <a href="http://kvcrawford.github.io/ng-permutation-builder/">See the live demo</a></p>

<h2 id="the-user-story">The User Story</h2>

<p>Jill works for <em>The Widget Factory</em>, a company in the business of making widgets. Oftentimes, she wants to be able to test how slightly different widgets perform against each other.</p>

<p>Rather than waste time creating the otherwise-same widget several times over, she would like to be able to quickly generate the different permutations, and be done with it.</p>

<!-- more -->

<h2 id="some-guiding-principles">Some Guiding Principles</h2>

<p>Before we begin, I&#39;d like to highlight some design principles that will guide our implementation. While the purpose of this article is to <em>demonstrate</em> rather than explain these topics in detail, I&#39;ve included links for further reading.</p>

<ul>
<li>The Single Responsibility Principle (SRP) <sup><a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">1</a></sup> <sup><a href="http://www.objectmentor.com/resources/articles/srp.pdf">2</a></sup></li>
<li>Separation of Concerns (SoC) <sup><a href="http://en.wikipedia.org/wiki/Separation_of_concerns">3</a></sup></li>
<li>Don&#39;t Repeat Yourself (DRY) <sup><a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">4</a></sup></li>
</ul>

<p>We&#39;ll proceed iteratively. First, make it workâ€”then, refactor.</p>

<h2 id="first:-how-do-we-generate-permutations?">First: how do we generate permutations?</h2>

<p>TDD for this type of stuff is a must. Consider this object of <em>permutable attributes</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">permutable_attributes =</span>
</span><span class='line'>  <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;Foobar&#39;</span><span class="p">,</span> <span class="s">&#39;Bizbat&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">description: </span><span class="p">[</span><span class="s">&#39;I pity the foo.&#39;</span><span class="p">,</span> <span class="s">&#39;Lorem ipsum.&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>From this, we would generate 4 possible permutations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="nv">name: </span><span class="s">&#39;Foobar&#39;</span>
</span><span class='line'>  <span class="nv">description: </span><span class="s">&#39;I pity the foo.&#39;</span>
</span><span class='line'><span class="p">,</span>
</span><span class='line'>  <span class="nv">name: </span><span class="s">&#39;Foobar&#39;</span>
</span><span class='line'>  <span class="nv">description: </span><span class="s">&#39;Lorem ipsum.&#39;</span>
</span><span class='line'><span class="p">,</span>
</span><span class='line'>  <span class="nv">name: </span><span class="s">&#39;Bizbat&#39;</span>
</span><span class='line'>  <span class="nv">description: </span><span class="s">&#39;I pity the foo.&#39;</span>
</span><span class='line'><span class="p">,</span>
</span><span class='line'>  <span class="nv">name: </span><span class="s">&#39;Bizbat&#39;</span>
</span><span class='line'>  <span class="nv">description: </span><span class="s">&#39;Lorem ipsum.&#39;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s expand on those expectations: <a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/test/permutation-factory.spec.coffee">permutation-factory.spec.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;permutationFactory:&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">permutationFactory = </span><span class="kc">null</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nx">inject</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">    _permutationFactory_</span>
</span><span class='line'><span class="nf">  ) -&gt;</span>
</span><span class='line'>    <span class="nv">permutationFactory = </span><span class="nx">_permutationFactory_</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;permute:&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># Expected result for 2*2</span>
</span><span class='line'>    <span class="nv">result_2x2 = </span><span class="p">[</span>
</span><span class='line'>      <span class="nv">name: </span><span class="s">&#39;foo&#39;</span>
</span><span class='line'>      <span class="nv">attr: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>    <span class="p">,</span>
</span><span class='line'>      <span class="nv">name: </span><span class="s">&#39;foo&#39;</span>
</span><span class='line'>      <span class="nv">attr: </span><span class="s">&#39;bat&#39;</span>
</span><span class='line'>    <span class="p">,</span>
</span><span class='line'>      <span class="nv">name: </span><span class="s">&#39;bar&#39;</span>
</span><span class='line'>      <span class="nv">attr: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>    <span class="p">,</span>
</span><span class='line'>      <span class="nv">name: </span><span class="s">&#39;bar&#39;</span>
</span><span class='line'>      <span class="nv">attr: </span><span class="s">&#39;bat&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;Should generate 4 permutations from 2*2 attributes.&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">attr: </span><span class="p">[</span><span class="s">&#39;biz&#39;</span><span class="p">,</span> <span class="s">&#39;bat&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">permutations</span><span class="p">).</span><span class="nx">toEqual</span> <span class="nx">result_2x2</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;Should ignore attributes without any values.&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="c1"># Some attributes won&#39;t be required--we want to skip those.</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">empty: </span><span class="p">[]</span>
</span><span class='line'>        <span class="nv">attr: </span><span class="p">[</span><span class="s">&#39;biz&#39;</span><span class="p">,</span> <span class="s">&#39;bat&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">permutations</span><span class="p">).</span><span class="nx">toEqual</span> <span class="nx">result_2x2</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;Should ignore empty attributes at the end of the object.&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">attr: </span><span class="p">[</span><span class="s">&#39;biz&#39;</span><span class="p">,</span> <span class="s">&#39;bat&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">empty: </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">permutations</span><span class="p">).</span><span class="nx">toEqual</span> <span class="nx">result_2x2</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;Should generate 6 permutations from 2*1*0*3 attributes.&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">type: </span><span class="p">[</span><span class="s">&#39;biz&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">empty: </span><span class="p">[]</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="p">[</span><span class="s">&#39;bing&#39;</span><span class="p">,</span> <span class="s">&#39;bang&#39;</span><span class="p">,</span> <span class="s">&#39;boom&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">permutations</span><span class="p">).</span><span class="nx">toEqual</span> <span class="p">[</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;foo&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;bing&#39;</span>
</span><span class='line'>      <span class="p">,</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;foo&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;bang&#39;</span>
</span><span class='line'>      <span class="p">,</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;foo&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;boom&#39;</span>
</span><span class='line'>      <span class="p">,</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;bar&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;bing&#39;</span>
</span><span class='line'>      <span class="p">,</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;bar&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;bang&#39;</span>
</span><span class='line'>      <span class="p">,</span>
</span><span class='line'>        <span class="nv">name: </span><span class="s">&#39;bar&#39;</span>
</span><span class='line'>        <span class="nv">type: </span><span class="s">&#39;biz&#39;</span>
</span><span class='line'>        <span class="nv">desc: </span><span class="s">&#39;boom&#39;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;Should invoke an optional callback for each permutation&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">callback = </span><span class="nx">jasmine</span><span class="p">.</span><span class="nx">createSpy</span> <span class="s">&#39;callback&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">attr: </span><span class="p">[</span><span class="s">&#39;biz&#39;</span><span class="p">,</span> <span class="s">&#39;bat&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">permutable_attributes</span><span class="p">,</span> <span class="nx">callback</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toBe</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">argsFor</span><span class="p">(</span><span class="nx">i</span><span class="p">)).</span><span class="nx">toEqual</span> <span class="p">[</span><span class="nx">result_2x2</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>With tests in place, <em>now</em> we can do our implementation: <a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/service/permutation-factory.coffee">permutation-factory.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name permutationFactory</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">Utility service for generating permutations of a resource.</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;permutationFactory&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name permute</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Generates permutations from a permutable_attributes object.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @param {Object} permutable_attributes</span>
</span><span class='line'><span class="cm">  @param {[Callback]} callback - Optional, invoked for each permutation</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @callback callback</span>
</span><span class='line'><span class="cm">  @param {Object} permutation</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @returns {Array} - Collection of permutations</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @example</span>
</span><span class='line'><span class="cm">  ```coffeescript</span>
</span><span class='line'><span class="cm">  permutations = permutationFactory.permute</span>
</span><span class='line'><span class="cm">    name: [&#39;Foobar&#39;, &#39;Bizbat&#39;]</span>
</span><span class='line'><span class="cm">    description: [&#39;I pity the foo.&#39;, &#39;Lorem ipsum.&#39;]</span>
</span><span class='line'><span class="cm">  ```</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">permute: </span><span class="nf">(permutable_attributes, callback) -&gt;</span>
</span><span class='line'>    <span class="nv">permutations = </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">recurse = </span><span class="nf">(keys, payload = {}, position = 0) -&gt;</span>
</span><span class='line'>      <span class="c1"># We&#39;ve finished constructing the permutation, exit call stack</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">position</span> <span class="o">is</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>        <span class="nv">permutation = </span><span class="nx">_</span><span class="p">.</span><span class="nx">clone</span> <span class="nx">payload</span>
</span><span class='line'>        <span class="nx">callback</span><span class="o">?</span> <span class="nx">permutation</span>
</span><span class='line'>        <span class="nx">permutations</span><span class="p">.</span><span class="nx">push</span> <span class="nx">permutation</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Grab the current key</span>
</span><span class='line'>      <span class="nv">key = </span><span class="nx">keys</span><span class="p">[</span><span class="nx">position</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># There are no values for this attribute, skip it</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">length</span> <span class="o">is</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nx">recurse</span> <span class="nx">keys</span><span class="p">,</span> <span class="nx">payload</span><span class="p">,</span> <span class="nx">position</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Otherwise, recurse for each possible value of this attribute</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">value</span> <span class="k">in</span> <span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>          <span class="nx">payload</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">recurse</span> <span class="nx">keys</span><span class="p">,</span> <span class="nx">payload</span><span class="p">,</span> <span class="nx">position</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">recurse</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span> <span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">permutations</span>
</span></code></pre></td></tr></table></div></figure>

<p>With our <code>permute</code> algorithm complete, now we can wire up a UI.</p>

<h2 id="a-first-iteration">A First Iteration</h2>

<p>One of the most common pitfalls seen in Angular apps are bloated controllers. It can be tempting to wedge bits of logic here and there, as it&#39;s easy at the time. Unfortunately, the controller quickly turns into a tangled mess. Consider the following implementation of our permutation builder:</p>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/controller/spaghetti-widget-builder-controller.coffee">spaghetti-widget-builder-controller.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.widget&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;SpaghettiWidgetBuilderController&#39;</span><span class="p">,</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">  $scope</span>
</span><span class='line'><span class="nf">  $state</span>
</span><span class='line'><span class="nf">  permutationFactory</span>
</span><span class='line'><span class="nf">  widgetFactory</span>
</span><span class='line'><span class="nf">  widgetStore</span>
</span><span class='line'><span class="nf">) -&gt;</span>
</span><span class='line'>  <span class="c1"># Placeholder object to hold references for our ngForm instances</span>
</span><span class='line'>  <span class="nv">$scope.forms = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name initialize</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Resets state, called if the user hits the reset button.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  The `do` immediately invokes our method to initialize state when</span>
</span><span class='line'><span class="cm">  controller first loads.</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">do</span> <span class="nv">$scope.initialize = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">$scope.permutations = </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$scope.permutable_attributes =</span>
</span><span class='line'>      <span class="nv">name: </span><span class="p">[]</span>
</span><span class='line'>      <span class="nv">description: </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># For binding to the form with ngModel</span>
</span><span class='line'>    <span class="nv">$scope.attributes =</span>
</span><span class='line'>      <span class="nv">name: </span><span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="nv">description: </span><span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We need to specify which fields are required. We can&#39;t just use a</span>
</span><span class='line'>  <span class="c1"># &#39;required&#39; attribute on the input tag, because it will no longer</span>
</span><span class='line'>  <span class="c1"># be required once at least 1 value has been entered.</span>
</span><span class='line'>  <span class="nv">$scope.required =</span>
</span><span class='line'>    <span class="nv">name: </span><span class="kc">true</span>
</span><span class='line'>    <span class="nv">description: </span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name buildPermutations</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Private function called every time an attribute is added or removed.</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">buildPermutations = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">$scope.permutations.length = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># At least we have the `permutationFactory` and `widgetFactory`,</span>
</span><span class='line'>    <span class="c1"># which are more obvious as candidates for separate services.</span>
</span><span class='line'>    <span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">,</span> <span class="nf">(permutation) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">widgetFactory</span><span class="p">.</span><span class="nx">validate</span> <span class="nx">permutation</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutations</span><span class="p">.</span><span class="nx">push</span> <span class="nx">permutation</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name createPermutations</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Persists the permutations and redirects to home page.</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.createPermutations = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">widgetStore</span><span class="p">.</span><span class="nx">addWidgets</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutations</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$state</span><span class="p">.</span><span class="nx">go</span> <span class="s">&#39;home&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name addAttribute</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Adds an attribute to generate permutations from, then empties the form input.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @param {String} key - Attribute name</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.addAttribute = </span><span class="nf">(key) -&gt;</span>
</span><span class='line'>    <span class="c1"># Tokenize the value</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">push</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Then empty the form input</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">buildPermutations</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name isRequired</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Used with ng-required, determines if at least 1 value has been entered or not.</span>
</span><span class='line'><span class="cm">  This view logic would fit much more nicely in a directive.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @param {String} key - Attribute name</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @returns {Boolean}</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.isRequired = </span><span class="nf">(key) -&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">required</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">and</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">length</span> <span class="o">is</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name isDisabled</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  We don&#39;t want the submit button to be enabled if input is empty.</span>
</span><span class='line'><span class="cm">  Also a good candidate for inclusion in a directive.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @param {String} key - Attribute name</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @returns {Boolean}</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.isDisabled = </span><span class="nf">(key) -&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name removeAttribute</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Removes a permutable attribute, then re-generates permutations.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @param {String} key - Attribute name</span>
</span><span class='line'><span class="cm">  @param {Integer} index - Index in the permutable attribute array.</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.removeAttribute = </span><span class="nf">(key, index) -&gt;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">splice</span> <span class="nx">index</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">buildPermutations</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/spaghetti-widget-builder.jade">spaghetti-widget-builder.jade</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="c">//- Can you spot all the repeating markup? Just imagine if we had more fields!</span>
</span><span class='line'><span class="nc">.container-fluid</span>
</span><span class='line'>  <span class="nc">.row</span>
</span><span class='line'>    <span class="nc">.col-md-12</span>
</span><span class='line'>      <span class="nt">p</span><span class="nc">.lead</span> Let&#39;s build some widgets.
</span><span class='line'>
</span><span class='line'>  <span class="nc">.row</span>
</span><span class='line'>    <span class="nc">.col-lg-6.col-md-8.col-sm-6</span>
</span><span class='line'>      <span class="nt">form</span><span class="nc">.form-group</span>(
</span><span class='line'>        <span class="na">ng-submit =</span> <span class="s">&quot;addAttribute(&#39;name&#39;)&quot;</span>
</span><span class='line'>        <span class="na">name =</span> <span class="s">&quot;forms.name&quot;</span>
</span><span class='line'>        <span class="na">ng-class =</span> <span class="s">&quot;{ &#39;has-error&#39;: forms.name.$invalid &amp;&amp; forms.name.value.$touched }&quot;</span>
</span><span class='line'>      )
</span><span class='line'>        <span class="nt">label</span><span class="nc">.control-label</span>(
</span><span class='line'>          <span class="na">for =</span> <span class="s">&quot;widget_name&quot;</span>
</span><span class='line'>        ) Name*
</span><span class='line'>
</span><span class='line'>        <span class="nc">.input-group</span>
</span><span class='line'>          <span class="nt">input</span><span class="nc">.form-control</span>(
</span><span class='line'>            <span class="na">id =</span> <span class="s">&quot;widget_name&quot;</span>
</span><span class='line'>            <span class="na">name =</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'>            <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">ng-model =</span> <span class="s">&quot;attributes.name&quot;</span>
</span><span class='line'>            <span class="na">ng-required =</span> <span class="s">&quot;isRequired(&#39;name&#39;)&quot;</span>
</span><span class='line'>          )
</span><span class='line'>
</span><span class='line'>          <span class="nc">.input-group-btn</span>
</span><span class='line'>            <span class="nt">button</span><span class="nc">.btn.btn-default</span>(
</span><span class='line'>              <span class="na">type =</span> <span class="s">&quot;submit&quot;</span>
</span><span class='line'>              <span class="na">ng-disabled =</span> <span class="s">&quot;isDisabled(&#39;name&#39;)&quot;</span>
</span><span class='line'>            ) Add
</span><span class='line'>
</span><span class='line'>      <span class="nt">form</span><span class="nc">.form-group</span>(
</span><span class='line'>        <span class="na">ng-submit =</span> <span class="s">&quot;addAttribute(&#39;description&#39;)&quot;</span>
</span><span class='line'>        <span class="na">name =</span> <span class="s">&quot;forms.description&quot;</span>
</span><span class='line'>        <span class="na">ng-class =</span> <span class="s">&quot;{ &#39;has-error&#39;: forms.description.$invalid &amp;&amp; forms.description.value.$touched }&quot;</span>
</span><span class='line'>      )
</span><span class='line'>        <span class="nt">label</span><span class="nc">.control-label</span>(
</span><span class='line'>          <span class="na">for =</span> <span class="s">&quot;widget_description&quot;</span>
</span><span class='line'>        ) Description
</span><span class='line'>
</span><span class='line'>        <span class="nc">.input-group</span>
</span><span class='line'>          <span class="nt">input</span><span class="nc">.form-control</span>(
</span><span class='line'>            <span class="na">id =</span> <span class="s">&quot;widget_description&quot;</span>
</span><span class='line'>            <span class="na">name =</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'>            <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">ng-model =</span> <span class="s">&quot;attributes.description&quot;</span>
</span><span class='line'>            <span class="na">ng-required =</span> <span class="s">&quot;isRequired(&#39;description&#39;)&quot;</span>
</span><span class='line'>          )
</span><span class='line'>
</span><span class='line'>          <span class="nc">.input-group-btn</span>
</span><span class='line'>            <span class="nt">button</span><span class="nc">.btn.btn-default</span>(
</span><span class='line'>              <span class="na">type =</span> <span class="s">&quot;submit&quot;</span>
</span><span class='line'>              <span class="na">ng-disabled =</span> <span class="s">&quot;isDisabled(&#39;description&#39;)&quot;</span>
</span><span class='line'>            ) Add
</span><span class='line'>
</span><span class='line'>    <span class="nc">.col-lg-4.col-md-4.col-sm-6</span>
</span><span class='line'>      <span class="nc">.panel.panel-default</span>
</span><span class='line'>        <span class="nc">.panel-heading</span>
</span><span class='line'>            <span class="nt">h4</span><span class="nc">.panel-title</span> {{permutations.length}} Widgets Built
</span><span class='line'>
</span><span class='line'>        <span class="nc">.panel-body</span>
</span><span class='line'>          <span class="nc">.panel.panel-default</span>
</span><span class='line'>            <span class="nc">.panel-heading</span>
</span><span class='line'>              <span class="nt">strong</span> Name ({{permutable_attributes.name.length}})
</span><span class='line'>
</span><span class='line'>            <span class="nt">ul</span><span class="nc">.list-group</span>
</span><span class='line'>              <span class="nt">li</span><span class="nc">.list-group-item</span>(
</span><span class='line'>                <span class="na">ng-repeat =</span> <span class="s">&quot;name in permutable_attributes.name&quot;</span>
</span><span class='line'>              )
</span><span class='line'>                <span class="nt">span</span> {{name}}
</span><span class='line'>                <span class="nt">button</span><span class="nc">.btn.close</span>(
</span><span class='line'>                  <span class="na">ng-click =</span> <span class="s">&quot;removeAttribute(&#39;name&#39;, $index)&quot;</span>
</span><span class='line'>                ) &amp;times;
</span><span class='line'>
</span><span class='line'>          <span class="nc">.panel.panel-default</span>
</span><span class='line'>            <span class="nc">.panel-heading</span>
</span><span class='line'>              <span class="nt">strong</span> Description ({{permutable_attributes.description.length}})
</span><span class='line'>
</span><span class='line'>            <span class="nt">ul</span><span class="nc">.list-group</span>
</span><span class='line'>              <span class="nt">li</span><span class="nc">.list-group-item</span>(
</span><span class='line'>                <span class="na">ng-repeat =</span> <span class="s">&quot;description in permutable_attributes.description&quot;</span>
</span><span class='line'>              )
</span><span class='line'>                <span class="nt">span</span> {{description}}
</span><span class='line'>                <span class="nt">button</span><span class="nc">.btn.close</span>(
</span><span class='line'>                  <span class="na">ng-click =</span> <span class="s">&quot;removeAttribute(&#39;description&#39;, $index)&quot;</span>
</span><span class='line'>                ) &amp;times;
</span><span class='line'>
</span><span class='line'>        <span class="nc">.panel-footer</span>
</span><span class='line'>          <span class="nc">.btn-group</span>
</span><span class='line'>            <span class="nt">button</span><span class="nc">.btn.btn-primary</span>(
</span><span class='line'>              <span class="na">type =</span> <span class="s">&quot;button&quot;</span>
</span><span class='line'>              <span class="na">ng-click =</span> <span class="s">&quot;createPermutations()&quot;</span>
</span><span class='line'>              <span class="na">ng-disabled =</span> <span class="s">&quot;permutations.length === 0&quot;</span>
</span><span class='line'>            ) Submit
</span><span class='line'>
</span><span class='line'>            <span class="nt">button</span><span class="nc">.btn.btn-default</span>(
</span><span class='line'>              <span class="na">type =</span> <span class="s">&quot;button&quot;</span>
</span><span class='line'>              <span class="na">ng-click =</span> <span class="s">&quot;initialize()&quot;</span>
</span><span class='line'>              <span class="na">ng-disabled =</span> <span class="s">&quot;permutations.length === 0&quot;</span>
</span><span class='line'>            ) Reset
</span></code></pre></td></tr></table></div></figure>

<p>It works! Cool! But, there are a few problems here:</p>

<ul>
<li>There&#39;s poor separation of concerns: view logic and state (<code>isRequired</code>, <code>isDisabled</code>) are intermingled with business logic and state.</li>
<li>What if we want to add new features, like permutable images? Or videos? This controller and template will keep getting bigger.</li>
<li>What if we want to add an additional step, to review the permutations we&#39;ve generated before saving them? Having the data model so tightly coupled to the controller becomes problematic.</li>
<li>What we have isn&#39;t very reusable. What if we want to create another permutation builder for <em>Gadgets</em>?</li>
</ul>

<p><em>Note that we still have the <a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/service/permutation-factory.coffee">permutationFactory</a> and <a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/service/widget-factory.coffee">widgetFactory</a>, which were more obvious candidates for separate services.</em></p>

<h2 id="teasing-out-the-layers">Teasing Out The Layers</h2>

<p>By isolating our concerns into separate layers, we can create something that is both easier to maintain <em>and</em> reusable. There are two modes of thinking that I like to employ:</p>

<h3 id="1.-think-purely-in-terms-of-business-logic-and-state">1. Think purely in terms of business logic and state</h3>

<p>Without even considering a UI, how would you describe the state of our permutation builder? How would you design an API to manipulate that state?</p>

<p>Consider <a href="https://facebook.github.io/flux/docs/overview.html#content">Flux</a>&#39;s idea of a store:</p>

<blockquote>
<p>Stores contain the application state and logic. Their role is somewhat similar to a model in a traditional MVC, but they manage the state of many objects â€” they do not represent a single record of data like ORM models do. Nor are they the same as Backbone&#39;s collections. More than simply managing a collection of ORM-style objects, stores manage the application state for a particular domain within the application.</p>
</blockquote>

<p>In an Angular app, we can implement something similar with a service, isolating the business logic and state for our permutation builder. This gives us a number of advantages:</p>

<ul>
<li>It&#39;s easier to test,</li>
<li>It becomes easier to reuse and extend, and</li>
<li>We avoid controller bloat, by properly isolating our concerns.</li>
</ul>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/service/permutation-builder-service.coffee">permutation-builder-service.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name PermutationBuilderService</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">A base class that can be extended for use with different permutable resources.</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;PermutationBuilderService&#39;</span><span class="p">,</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">  permutationFactory</span>
</span><span class='line'><span class="nf">) -&gt;</span>
</span><span class='line'>  <span class="k">class</span> <span class="nx">PermutationBuilderService</span>
</span><span class='line'>    <span class="nv">constructor: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">@initialize</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name initialize</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Method used to reset service to an empty state.</span>
</span><span class='line'><span class="cm">    Override this method to define attributes for a permutable resource.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">initialize: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="c1"># Regular attributes that get added to each permutation</span>
</span><span class='line'>      <span class="vi">@attributes = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Permutable attributes</span>
</span><span class='line'>      <span class="vi">@permutable_attributes = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Collection of permutations</span>
</span><span class='line'>      <span class="vi">@permutations = </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name addAttribute</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Adds a permutable attribute</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @param {String} key - Name of attribute</span>
</span><span class='line'><span class="cm">    @param {String|Number|Object|Array} value - Can be of any type</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Boolean} Whether attribute was added successfully or not.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">addAttribute: </span><span class="nf">(key, value) -&gt;</span>
</span><span class='line'>      <span class="nv">bucket = </span><span class="nx">@permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">throw</span> <span class="nb">Error</span> <span class="s">&quot;Invalid key: &#39;</span><span class="si">#{</span><span class="nx">key</span><span class="si">}</span><span class="s">&#39;&quot;</span> <span class="k">unless</span> <span class="nx">bucket</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">_</span><span class="p">.</span><span class="nx">contains</span> <span class="nx">bucket</span><span class="p">,</span> <span class="nx">value</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span> <span class="s">&quot;&#39;</span><span class="si">#{</span><span class="nx">value</span><span class="si">}</span><span class="s">&#39; already entered.&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Add the value to permute against</span>
</span><span class='line'>      <span class="nx">bucket</span><span class="p">.</span><span class="nx">push</span> <span class="nx">value</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># And generate the permutations</span>
</span><span class='line'>      <span class="nx">@buildPermutations</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name buildPermutations</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Builds permutations of the resource.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Array} Collection of permutations</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">buildPermutations: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="c1"># Empty our collection of permutations from previous runs</span>
</span><span class='line'>      <span class="vi">@permutations.length = </span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">permutationFactory</span><span class="p">.</span><span class="nx">permute</span> <span class="nx">@permutable_attributes</span><span class="p">,</span> <span class="nf">(permutation) =&gt;</span>
</span><span class='line'>        <span class="c1"># Extend common attributes onto each permutation</span>
</span><span class='line'>        <span class="nv">resource = </span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span> <span class="nx">permutation</span><span class="p">,</span> <span class="nx">@attributes</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">@permutations</span><span class="p">.</span><span class="nx">push</span> <span class="nx">resource</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">@permutations</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name createPermutations</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Abstract method. Override to define how a permutable resource gets persisted.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">createPermutations: </span><span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name removeAttribute</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Removes a permutable attribute by index</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @param {String} key - Attribute name</span>
</span><span class='line'><span class="cm">    @param {Integer} index - Index of value in the permutable attribute array.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Boolean} - true if item successfully removed</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">removeAttribute: </span><span class="nf">(key, index) -&gt;</span>
</span><span class='line'>      <span class="nv">bucket = </span><span class="nx">@permutable_attributes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">throw</span> <span class="nb">Error</span> <span class="s">&quot;Invalid key: &#39;</span><span class="si">#{</span><span class="nx">key</span><span class="si">}</span><span class="s">&#39;&quot;</span> <span class="k">unless</span> <span class="nx">bucket</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">removed = </span><span class="nx">bucket</span><span class="p">.</span><span class="nx">splice</span> <span class="nx">index</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">@buildPermutations</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">removed</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="2.-think-of-your-ui-in-terms-of-a-tree-of-components">2. Think of your UI in terms of a tree of components</h3>

<p>Look at your design. Look at your markup. Do you see any patterns? These parts of our UI are ripe for refactoring into directives.</p>

<p>Imagine being able to compose our view as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">kc-permutation-builder</span>(
</span><span class='line'>  <span class="na">service =</span> <span class="s">&quot;PermutationBuilderService&quot;</span>
</span><span class='line'>)
</span><span class='line'>  <span class="nc">.main</span>
</span><span class='line'>    <span class="nt">kc-permutable-input</span>(
</span><span class='line'>      <span class="na">name =</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>      <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>      <span class="na">required</span>
</span><span class='line'>    ) Name
</span><span class='line'>
</span><span class='line'>    <span class="nt">kc-permutable-input</span>(
</span><span class='line'>      <span class="na">name =</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>      <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>    ) Description
</span><span class='line'>
</span><span class='line'>  <span class="nc">.sidebar</span>
</span><span class='line'>    <span class="nt">kc-permutable-attribute</span>(
</span><span class='line'>      <span class="na">name =</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>    ) Name
</span><span class='line'>
</span><span class='line'>    <span class="nt">kc-permutable-attribute</span>(
</span><span class='line'>      <span class="na">name =</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>    ) Description
</span><span class='line'>
</span><span class='line'>    <span class="nt">button</span>(
</span><span class='line'>      <span class="na">type =</span> <span class="s">&quot;submit&quot;</span>
</span><span class='line'>      <span class="na">ng-click =</span> <span class="s">&quot;submit()&quot;</span>
</span><span class='line'>    ) Create Permutations
</span></code></pre></td></tr></table></div></figure>

<p>That&#39;s a lot more succinct, expressive, and reusable.</p>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/directive/permutation-builder-directive.coffee">permutation-builder-directive.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name kcPermutationBuilder</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">This serves as a way to bind an instance of a PermutationBuilderService and</span>
</span><span class='line'><span class="cm">expose its API to a group of `kcPermutableInput` directives.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Even though it has an isolate scope, it doesn&#39;t have any template, so it doesn&#39;t</span>
</span><span class='line'><span class="cm">introduce an isolate scope in the template in which its used.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">@param {PermutationBuilderService} service - Or a subclass thereof</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;kcPermutationBuilder&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">controller: </span><span class="s">&#39;KcPermutationBuilderController&#39;</span>
</span><span class='line'>  <span class="nv">scope:</span>
</span><span class='line'>    <span class="nv">service: </span><span class="s">&#39;=&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;KcPermutationBuilderController&#39;</span><span class="p">,</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">  $scope</span>
</span><span class='line'><span class="nf">) -&gt;</span>
</span><span class='line'>  <span class="vi">@permutable_attributes = </span><span class="nx">$scope</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">permutable_attributes</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@addAttribute =</span>
</span><span class='line'>    <span class="nx">angular</span><span class="p">.</span><span class="nx">bind</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">service</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">addAttribute</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@removeAttribute =</span>
</span><span class='line'>    <span class="nx">angular</span><span class="p">.</span><span class="nx">bind</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">service</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">service</span><span class="p">.</span><span class="nx">removeAttribute</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/directive/permutable-input-directive.coffee">permutable-input-directive.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name kcPermutableInput</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">Encapsulates templating and view logic for a permutable input, which is its</span>
</span><span class='line'><span class="cm">own mini form. Makes for a flexible component that can be used to compose the</span>
</span><span class='line'><span class="cm">view for any type of permutable resource.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">@param {String} name - Permutable attribute key</span>
</span><span class='line'>
</span><span class='line'><span class="cm">@example</span>
</span><span class='line'><span class="cm">`kc-permutable-input(name=&quot;title&quot;, type=&quot;text&quot;, required) Label`</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;kcPermutableInput&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">require: </span><span class="s">&#39;^kcPermutationBuilder&#39;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">templateUrl: </span><span class="s">&#39;/permutation/_permutable-input.html&#39;</span>
</span><span class='line'>  <span class="nv">transclude: </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">scope:</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;@name&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">link: </span><span class="nf">(scope, element, attrs, kcPermutationBuilder) -&gt;</span>
</span><span class='line'>    <span class="c1"># Ensure input IDs are unique</span>
</span><span class='line'>    <span class="nv">scope.input_id = </span><span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span> <span class="s">&#39;permutatable_input_&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">scope.state =</span>
</span><span class='line'>      <span class="nv">value: </span><span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="nv">is_required: </span><span class="nx">attrs</span><span class="p">.</span><span class="nx">required</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name isDisabled</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    We don&#39;t want the submit button to be enabled if input is empty.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Boolean}</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">scope.isDisabled = </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name isRequired</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    An input is no longer required if at least 1 value has already been entered.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Boolean}</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">scope.isRequired = </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">required</span><span class="o">?</span> <span class="o">and</span>
</span><span class='line'>        <span class="nx">kcPermutationBuilder</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">scope</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">length</span> <span class="o">is</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name submit</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Adds attribute and clears the input.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">scope.submit = </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">is_added = </span><span class="nx">kcPermutationBuilder</span><span class="p">.</span><span class="nx">addAttribute</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">is_added</span>
</span><span class='line'>        <span class="nv">scope.state.value = </span><span class="s">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/_permutable-input.jade">_permutable-input.jade</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">form</span><span class="nc">.form-group</span>(
</span><span class='line'>  <span class="na">ng-submit =</span> <span class="s">&quot;submit()&quot;</span>
</span><span class='line'>  <span class="na">name =</span> <span class="s">&quot;form&quot;</span>
</span><span class='line'>  <span class="na">ng-class =</span> <span class="s">&quot;{ &#39;has-error&#39;: form.$invalid &amp;&amp; form.value.$touched }&quot;</span>
</span><span class='line'>)
</span><span class='line'>  <span class="nt">label</span><span class="nc">.control-label</span>(
</span><span class='line'>    <span class="na">for =</span> <span class="s">&quot;{{input_id}}&quot;</span>
</span><span class='line'>  )
</span><span class='line'>    <span class="nt">span</span>(<span class="na">ng-transclude</span>)
</span><span class='line'>    <span class="nt">span</span>(<span class="na">ng-if=</span><span class="s">&quot;state.is_required&quot;</span>) *
</span><span class='line'>
</span><span class='line'>  <span class="nc">.input-group</span>
</span><span class='line'>    <span class="nt">input</span><span class="nc">.form-control</span>(
</span><span class='line'>      <span class="na">id =</span> <span class="s">&quot;{{input_id}}&quot;</span>
</span><span class='line'>      <span class="na">name =</span> <span class="s">&quot;value&quot;</span>
</span><span class='line'>      <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>      <span class="na">ng-model =</span> <span class="s">&quot;state.value&quot;</span>
</span><span class='line'>      <span class="na">ng-required =</span> <span class="s">&quot;isRequired()&quot;</span>
</span><span class='line'>    )
</span><span class='line'>
</span><span class='line'>    <span class="nc">.input-group-btn</span>
</span><span class='line'>      <span class="nt">button</span><span class="nc">.btn.btn-default</span>(
</span><span class='line'>        <span class="na">type =</span> <span class="s">&quot;submit&quot;</span>
</span><span class='line'>        <span class="na">ng-disabled =</span> <span class="s">&quot;isDisabled()&quot;</span>
</span><span class='line'>      ) Add
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/directive/permutable-attribute-directive.coffee">permutable-attribute-directive.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name kcPermutableAttribute</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">Displays the values entered for a permutable attribute.</span>
</span><span class='line'><span class="cm">Allows user to remove a value.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">@param {String} name - Permutable attribute key</span>
</span><span class='line'>
</span><span class='line'><span class="cm">@example</span>
</span><span class='line'><span class="cm">kc-permutable-attribute(</span>
</span><span class='line'><span class="cm">  name=&quot;description&quot;</span>
</span><span class='line'><span class="cm">) Description</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.permutation&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span> <span class="s">&#39;kcPermutableAttribute&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">require: </span><span class="s">&#39;^kcPermutationBuilder&#39;</span>
</span><span class='line'>  <span class="nv">restrict: </span><span class="s">&#39;E&#39;</span>
</span><span class='line'>  <span class="nv">templateUrl: </span><span class="s">&#39;/permutation/_permutable-attribute.html&#39;</span>
</span><span class='line'>  <span class="nv">transclude: </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">scope:</span>
</span><span class='line'>    <span class="nv">name: </span><span class="s">&#39;@name&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">link: </span><span class="nf">(scope, element, attrs, kcPermutationBuilder) -&gt;</span>
</span><span class='line'>    <span class="nv">scope.permutable_attribute =</span>
</span><span class='line'>      <span class="nx">kcPermutationBuilder</span><span class="p">.</span><span class="nx">permutable_attributes</span><span class="p">[</span><span class="nx">scope</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name removeAttribute</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Calls on service to remove attribute.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @param {Integer} index - Value&#39;s index in the permutable attribute array.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">scope.removeAttribute = </span><span class="nf">(index) -&gt;</span>
</span><span class='line'>      <span class="nx">kcPermutationBuilder</span><span class="p">.</span><span class="nx">removeAttribute</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">index</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/permutation/_permutable-attribute.jade">_permutable-attribute.jade</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nc">.panel.panel-default</span>
</span><span class='line'>  <span class="nc">.panel-heading</span>
</span><span class='line'>    <span class="nt">strong</span>(<span class="na">ng-transclude</span>)
</span><span class='line'>    <span class="nt">strong</span> &amp;nbsp;({{permutable_attribute.length}})
</span><span class='line'>
</span><span class='line'>  <span class="nt">ul</span><span class="nc">.list-group</span>
</span><span class='line'>    <span class="nt">li</span><span class="nc">.list-group-item</span>(
</span><span class='line'>      <span class="na">ng-repeat =</span> <span class="s">&quot;attribute in permutable_attribute&quot;</span>
</span><span class='line'>    )
</span><span class='line'>      <span class="nt">span</span> {{attribute}}
</span><span class='line'>      <span class="nt">button</span><span class="nc">.btn.close</span>(
</span><span class='line'>        <span class="na">ng-click =</span> <span class="s">&quot;removeAttribute($index)&quot;</span>
</span><span class='line'>      ) &amp;times;
</span></code></pre></td></tr></table></div></figure>

<h2 id="the-new-and-improved-widget-builder">The New and Improved Widget Builder</h2>

<p>Now with the abstracted modules ready for use, look at how much leaner all of our widget-specific code is.</p>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/service/widget-builder-service.coffee">widget-builder-service.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name WidgetBuilderService</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">Extends PermutationBuilderService for use with widgets.</span>
</span><span class='line'><span class="cm">Drives the business logic of the widget builder UI flow.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">NOTE: injection returns an instance, not the constructor (see end of file).</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.widget&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span> <span class="s">&#39;WidgetBuilderService&#39;</span><span class="p">,</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">  PermutationBuilderService</span>
</span><span class='line'><span class="nf">  widgetFactory</span>
</span><span class='line'><span class="nf">  widgetStore</span>
</span><span class='line'><span class="nf">  $q</span>
</span><span class='line'><span class="nf">) -&gt;</span>
</span><span class='line'>  <span class="k">class</span> <span class="nx">WidgetBuilderService</span> <span class="k">extends</span> <span class="nx">PermutationBuilderService</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name initialize</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Defines permutable attributes for widgets.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">initialize: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@permutable_attributes =</span>
</span><span class='line'>        <span class="nv">name: </span><span class="p">[]</span>
</span><span class='line'>        <span class="nv">description: </span><span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name buildPermutations</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Here, we extend the base method to ensure that we only build valid widgets.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">buildPermutations: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@permutations = </span><span class="nx">_</span><span class="p">.</span><span class="nx">filter</span> <span class="nx">@permutations</span><span class="p">,</span> <span class="nx">widgetFactory</span><span class="p">.</span><span class="nx">validate</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">###</span>
</span><span class='line'><span class="cm">    @name createPermutations</span>
</span><span class='line'><span class="cm">    @description</span>
</span><span class='line'><span class="cm">    Specifies how a permutation gets persisted.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    @returns {Promise} - Fulfilled with the newly created permutations.</span>
</span><span class='line'><span class="cm">    ###</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">createPermutations: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="c1"># Grab the permutations before we empty them</span>
</span><span class='line'>      <span class="nv">permutations = </span><span class="nx">@permutations</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Implement your AJAX call here</span>
</span><span class='line'>      <span class="nx">widgetStore</span><span class="p">.</span><span class="nx">addWidgets</span> <span class="nx">permutations</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Reset our service</span>
</span><span class='line'>      <span class="nx">@initialize</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">when</span> <span class="nx">permutations</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">WidgetBuilderService</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/controller/widget-builder-controller.coffee">widget-builder-controller.coffee</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="cm">###</span>
</span><span class='line'><span class="cm">@name WidgetBuilderController</span>
</span><span class='line'><span class="cm">@description</span>
</span><span class='line'><span class="cm">Our controller and its template become a very thin layer that</span>
</span><span class='line'><span class="cm">glue the pieces together.</span>
</span><span class='line'><span class="cm">###</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span> <span class="s">&#39;app.widget&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;WidgetBuilderController&#39;</span><span class="p">,</span> <span class="nf">(</span>
</span><span class='line'><span class="nf">  $scope</span>
</span><span class='line'><span class="nf">  $state</span>
</span><span class='line'><span class="nf">  WidgetBuilderService</span>
</span><span class='line'><span class="nf">) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.WidgetBuilderService = </span><span class="nx">WidgetBuilderService</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  @name submit</span>
</span><span class='line'><span class="cm">  @description</span>
</span><span class='line'><span class="cm">  Calls on the service to create permutations, then redirects to home page.</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.submit = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">WidgetBuilderService</span><span class="p">.</span><span class="nx">createPermutations</span><span class="p">().</span><span class="nx">then</span> <span class="nf">(widgets) -&gt;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;look at all these widgets we built!&#39;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">table</span> <span class="nx">widgets</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$state</span><span class="p">.</span><span class="nx">go</span> <span class="s">&#39;home&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p><a href="https://github.com/kvcrawford/ng-permutation-builder/blob/master/src/widget/widget-builder.jade">widget-builder.jade</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nc">.container-fluid</span>
</span><span class='line'>  <span class="nc">.row</span>
</span><span class='line'>    <span class="nc">.col-md-12</span>
</span><span class='line'>      <span class="nt">p</span><span class="nc">.lead</span> Let&#39;s build some widgets.
</span><span class='line'>
</span><span class='line'>  <span class="nt">kc-permutation-builder</span>(
</span><span class='line'>    <span class="na">service =</span> <span class="s">&quot;WidgetBuilderService&quot;</span>
</span><span class='line'>  )
</span><span class='line'>    <span class="nc">.row</span>
</span><span class='line'>      <span class="nc">.col-lg-6.col-md-8.col-sm-6</span>
</span><span class='line'>          <span class="nt">kc-permutable-input</span>(
</span><span class='line'>            <span class="na">name =</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>            <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">required</span>
</span><span class='line'>          ) Name
</span><span class='line'>
</span><span class='line'>          <span class="nt">kc-permutable-input</span>(
</span><span class='line'>            <span class="na">name =</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>            <span class="na">type =</span> <span class="s">&quot;text&quot;</span>
</span><span class='line'>          ) Description
</span><span class='line'>
</span><span class='line'>      <span class="nc">.col-lg-4.col-md-4.col-sm-6</span>
</span><span class='line'>        <span class="nc">.panel.panel-default</span>
</span><span class='line'>          <span class="nc">.panel-heading</span>
</span><span class='line'>            <span class="nt">h4</span><span class="nc">.panel-title</span> {{WidgetBuilderService.permutations.length}} Widgets Built
</span><span class='line'>
</span><span class='line'>          <span class="nc">.panel-body</span>
</span><span class='line'>            <span class="nt">kc-permutable-attribute</span>(
</span><span class='line'>              <span class="na">name =</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>            ) Name
</span><span class='line'>
</span><span class='line'>            <span class="nt">kc-permutable-attribute</span>(
</span><span class='line'>              <span class="na">name =</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>            ) Description
</span><span class='line'>
</span><span class='line'>          <span class="nc">.panel-footer</span>
</span><span class='line'>            <span class="nc">.btn-group</span>
</span><span class='line'>              <span class="nt">button</span><span class="nc">.btn.btn-primary</span>(
</span><span class='line'>                <span class="na">type =</span> <span class="s">&quot;button&quot;</span>
</span><span class='line'>                <span class="na">ng-click =</span> <span class="s">&quot;submit()&quot;</span>
</span><span class='line'>                <span class="na">ng-disabled =</span> <span class="s">&quot;WidgetBuilderService.permutations.length === 0&quot;</span>
</span><span class='line'>              ) Submit
</span><span class='line'>
</span><span class='line'>              <span class="nt">button</span><span class="nc">.btn.btn-default</span>(
</span><span class='line'>                <span class="na">type =</span> <span class="s">&quot;button&quot;</span>
</span><span class='line'>                <span class="na">ng-click =</span> <span class="s">&quot;WidgetBuilderService.initialize()&quot;</span>
</span><span class='line'>                <span class="na">ng-disabled =</span> <span class="s">&quot;WidgetBuilderService.permutations.length === 0&quot;</span>
</span><span class='line'>              ) Reset
</span></code></pre></td></tr></table></div></figure>

<h2 id="going-forward">Going Forward</h2>

<p>Now, it&#39;s trivial to implement a permutation builder for <em>Gadgets</em>. Or, say we wanted to support permutations of images? The surface area for changes needed is minimal: we just need a new <code>kcPermutableImage</code> directive, and the rest would work pretty much as-is.</p>

<p>Neat, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing: ng-coffeeplate]]></title>
    <link href="http://kvcrawford.github.io/blog/2015/02/09/introducing-ng-coffeeplate/"/>
    <updated>2015-02-09T20:06:00-08:00</updated>
    <id>http://kvcrawford.github.io/blog/2015/02/09/introducing-ng-coffeeplate</id>
    <content type="html"><![CDATA[<p>Grunt was really awesome when it first came on the scene, but I&#39;ve really come to love Gulp. It&#39;s faster, more flexible, and I find the &quot;code-over-configuration&quot; paradigm much easier to reason aboutâ€”all with fewer lines of code.</p>

<p>I needed a boilerplateâ€”suited to my tastesâ€”that I could use to quickly get up and running on new projects with. If you&#39;re a fan of Angular, CoffeeScript, Jade, Sass, and TDD, then maybe you&#39;ll like it too!</p>

<p>Check it out at <a href="https://github.com/kvcrawford/ng-coffeeplate">https://github.com/kvcrawford/ng-coffeeplate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring a Production Node.js and MongoDB Environment in Ubuntu on an Amazon EC2 Instance]]></title>
    <link href="http://kvcrawford.github.io/blog/2013/11/20/configuring-a-production-node-js-and-mongodb-environment-in-ubuntu-on-an-amazon-ec2-instance/"/>
    <updated>2013-11-20T11:02:00-08:00</updated>
    <id>http://kvcrawford.github.io/blog/2013/11/20/configuring-a-production-node-js-and-mongodb-environment-in-ubuntu-on-an-amazon-ec2-instance</id>
    <content type="html"><![CDATA[<p>This tutorial will cover launching an EC2 instance, setting up the Node.js/MongoDB stack, and keeping your app running as a service so that it is resilient to failure. Most everything is taken directly from the official documentation for the various packages, and I included links. That way you can refer to the tutorial as a general guide, and still use official documentation to get into the nitty-gritty details.</p>

<p>Right, then. Let&#39;s get started!</p>

<!-- more -->

<h2 id="first,-a-note-about-keypairs">First, a Note About Keypairs</h2>

<p>When you launch a new instance, it&#39;s pretty funky that Amazon doesn&#39;t let you paste or upload your public key to use for authentication. You can either generate a new private key to download, or select an existing key from your account. I recommend that you upload your public key beforehand, by going to the <strong>AWS Console -&gt; EC2 -&gt; Key Pairs -&gt; Import Key Pair</strong>.</p>

<p>You can also upload a public key via the command line, with <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-ImportKeyPair.html">ec2-import-keypair</a>. I installed <a href="https://github.com/aws/aws-cli">aws-cli</a> (note: slightly different from <code>ec2-import-keypair</code>) and issued the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws ec2 import-key-pair --key-name user@email.com --public-key-material file://~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>

<p>If you do this beforehand, your key will show up in the web interface for you to select when launching. Otherwise, AWS will generate the private key for you to download.</p>

<h2 id="provision-your-ec2-instance">Provision your EC2 instance</h2>

<p>I chose Ubuntu Server 13.10 for my AMI. You&#39;ll want to use 64-bit for optimal MongoDB support (see <a href="http://blog.mongodb.org/post/137788967/32-bit-limitations">this post</a>). Make sure to read through all the options in the wizard to configure your instance for your needs. <a href="http://docs.mongodb.org/ecosystem/platforms/amazon-ec2/">MongoDB recommends</a> an <a href="https://aws.amazon.com/ec2/instance-types/">instance type</a> that is EBS-optimized. More on that shortly.</p>

<p>If you use an automatically assigned IP address, you&#39;ll lose it when your instance is stopped or terminated. So, to prevent any DNS-related interruption of service, you&#39;ll want to reserve a dedicated IP address, which Amazon refers to as an <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP</a> (EIP). You can&#39;t assign an EIP until you&#39;ve already launched your EC2, so we&#39;ll revisit that later. For right now, automatically assign a public IP.</p>

<h2 id="storage">Storage</h2>

<p>The <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html">AWS storage documentation</a> recommends using EBS for persistent data that you care about&#8211;like your database. From the documentation:</p>

<blockquote>
<p>An Amazon EBS volume behaves like a raw, unformatted, external block device that you can attach to a single instance. They persist independently from the running life of an Amazon EC2 instance. After an EBS volume is attached to an instance, you can use it like any other physical hard drive. As illustrated in the previous figure, you can attach multiple volumes to an instance. You can also detach an EBS volume from one instance and attach it to another instance.</p>
</blockquote>

<p>This comes in handy if you need to upgrade your EC2 instance, or provision a new one for any reason. Again, <a href="http://docs.mongodb.org/ecosystem/platforms/amazon-ec2/">MongoDB recommends</a> an EBS-optimized EC2 instance with a <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops">Provisioned IOPS EBS volume</a>. So set up an EBS volume, and we&#39;ll be mounting it for MongoDB to use. It would make good sense to utilize Amazon S3 for static assets, but that&#39;s outside the scope of this article.</p>

<h2 id="configure-security-group">Configure Security Group</h2>

<p>You&#39;ll want to have SSH (port 22) open to any IP you might access it from. You&#39;ll also want HTTP and HTTPS ports accessible from any IP.</p>

<h2 id="launch!">Launch!</h2>

<p>You didn&#39;t upload your SSH key beforehand, did you? That&#39;s okay, I didn&#39;t figure that out until afterwards, either. So I generated a key, and copied my normal SSH key into the <code>authorized_keys</code> file afterwards. Assuming you&#39;ve placed the key in your <code>~/.ssh/</code> dir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Make sure you restrict permissions for your private key file</span>
</span><span class='line'>chmod 400 ~/.ssh/aws.pem
</span><span class='line'><span class="c"># Add the downloaded AWS key to your key agent</span>
</span><span class='line'>ssh-add ~/.ssh/aws.pem
</span><span class='line'><span class="c"># If you don&#39;t have ssh-copy-id, you can install it via homebrew:</span>
</span><span class='line'>brew install ssh-copy-id
</span><span class='line'><span class="c"># Then, copy your normal SSH key to the EC2&#39;s ~/.ssh/authorized_keys file</span>
</span><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub ubuntu@hostname
</span></code></pre></td></tr></table></div></figure>

<p>Now you can setup <a href="https://help.github.com/articles/using-ssh-agent-forwarding">ssh agent forwarding</a> for handy stuff like connecting to Github!</p>

<h2 id="onwards:-install-and-configure-mongodb">Onwards: Install and Configure MongoDB</h2>

<p>Again, this is all based on <a href="http://docs.mongodb.org/ecosystem/platforms/amazon-ec2/#deploy-mongodb-ec2">MongoDB&#39;s official documentation</a>. They recommend using separate EBS stores for your data, journal, and log, but I&#39;m just going to cover putting it all on a single EBS to keep things a little simpler.</p>

<p>First, let&#39;s install MongoDB. These commands are directly from <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">their tutorial</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Import MongoDB&#39;s GPG key used to ensure package authenticity</span>
</span><span class='line'>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'><span class="c"># Create a /etc/apt/sources.list.d/mongodb.list file</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39;</span> | sudo tee /etc/apt/sources.list.d/mongodb.list
</span><span class='line'><span class="c"># Update your repository</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'><span class="c"># Install MongoDB</span>
</span><span class='line'>sudo apt-get install mongodb-10gen
</span></code></pre></td></tr></table></div></figure>

<p>Now that that&#39;s done, let&#39;s configure it to use the EBS volume we setup earlier. The AWS console will say your volume is something like /dev/sdb, but the actual device name in Ubuntu will be something like /dev/xvdb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create the file system on your EBS volume. &lt;device name&gt; is your EBS path</span>
</span><span class='line'><span class="c"># sudo mkfs -t ext4 &lt;device name&gt;</span>
</span><span class='line'>sudo mkfs -t ext4 /dev/xvdb
</span><span class='line'><span class="c"># Create a folder wherever you want to mount it</span>
</span><span class='line'><span class="c"># mkdir &lt;mount point&gt;</span>
</span><span class='line'>mkdir /database
</span><span class='line'><span class="c"># Add an fstab entry so it gets mounted on system boot</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;/dev/xvdb /database ext4 defaults,auto,noatime,noexec 0 0&#39;</span> | sudo tee -a /etc/fstab
</span><span class='line'><span class="c"># Mount it</span>
</span><span class='line'>sudo mount /dev/xvdb /database
</span><span class='line'><span class="c"># Create directories for the actual data, logs, and journal</span>
</span><span class='line'><span class="nb">cd</span> /database
</span><span class='line'>mkdir data journal log
</span><span class='line'><span class="c"># Set MongoDB to the owner of these directories</span>
</span><span class='line'>sudo chown -R mongodb:mongodb /database
</span><span class='line'><span class="c"># And link your journal</span>
</span><span class='line'>ln -s /database/journal /database/data/journal
</span></code></pre></td></tr></table></div></figure>

<p>Now configure MongoDB to use these paths: <code>sudo nano /etc/mongodb.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">dbpath</span> <span class="o">=</span> /database/data
</span><span class='line'><span class="nv">logpath</span> <span class="o">=</span> /database/log/mongodb.log
</span></code></pre></td></tr></table></div></figure>

<h2 id="install-node">Install Node</h2>

<p>See <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os">the official wiki</a> for more information about installing Node.js on Ubuntu. Ubuntu&#39;s default Node package lags behind the latest stable release. If that&#39;s okay, then go ahead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nodejs
</span><span class='line'><span class="c"># Due to a naming conflict, node was renamed to nodejs in apt</span>
</span><span class='line'><span class="c"># So you&#39;ll need to create a symlink to use the command &#39;node&#39;</span>
</span><span class='line'>ln -s /usr/bin/nodejs /usr/bin/node
</span></code></pre></td></tr></table></div></figure>

<p>But if you want to install the latest version of Node, you&#39;re gonna have to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install python-software-properties python g++ make
</span><span class='line'>sudo apt-add-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs
</span><span class='line'>ln -s /usr/bin/nodejs /usr/bin/node
</span></code></pre></td></tr></table></div></figure>

<p>Listening on port 80 requires root privileges. Instead, Node will listen on port 3000, and we&#39;ll redirect requests from port 80 to there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
</span></code></pre></td></tr></table></div></figure>

<p>Add the command (minus <code>sudo</code>) to your rc.local file to make sure this applies on boot as well: <code>sudo nano /etc/rc.local</code></p>

<h2 id="keep-your-app-running-forever">Keep your app running forever</h2>

<p>For this, we&#39;re going to use <a href="https://github.com/nodejitsu/forever">Forever</a> and <a href="http://upstart.ubuntu.com/">Upstart</a>. Forever is used in production at <a href="https://www.nodejitsu.com/">Nodejitsu</a>, and restarts your app if it crashes. Upstart registers your app as a service, starting it on boot and cleanly stopping it on shutdown. The configuration that follows is directly from <a href="https://www.exratione.com/2013/02/nodejs-and-forever-as-a-service-simple-upstart-and-init-scripts-for-ubuntu/">this awesome guide on exratione.com</a>.</p>

<p>First, install Forever:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo npm install -g forever
</span></code></pre></td></tr></table></div></figure>

<p>Then, create the following Upstart configuration: <code>sudo nano /etc/init/myapp.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># My App upstart config /etc/init/myapp.conf</span>
</span><span class='line'>description <span class="s2">&quot;Startup script for My App using Forever&quot;</span>
</span><span class='line'>
</span><span class='line'>start on startup
</span><span class='line'>stop on shutdown
</span><span class='line'>
</span><span class='line'><span class="c"># So that Upstart reports the pid of the Node.js process started by Forever</span>
</span><span class='line'><span class="c"># rather than Forever&#39;s own pid</span>
</span><span class='line'>expect fork
</span><span class='line'>
</span><span class='line'><span class="c"># Full path to the node binaries</span>
</span><span class='line'>env <span class="nv">NODE_BIN_DIR</span><span class="o">=</span><span class="s2">&quot;/usr/bin/node&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Path for finding global NPM node_modules</span>
</span><span class='line'>env <span class="nv">NODE_PATH</span><span class="o">=</span><span class="s2">&quot;/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Directory containing My App</span>
</span><span class='line'>env <span class="nv">APPLICATION_DIRECTORY</span><span class="o">=</span><span class="s2">&quot;/home/ubuntu/myapp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Application javascript filename</span>
</span><span class='line'>env <span class="nv">APPLICATION_START</span><span class="o">=</span><span class="s2">&quot;server.js&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Environment to run app as</span>
</span><span class='line'>env <span class="nv">NODE_ENV</span><span class="o">=</span><span class="s2">&quot;production&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Log file</span>
</span><span class='line'>env <span class="nv">LOG</span><span class="o">=</span><span class="s2">&quot;/var/log/chirp.log&quot;</span>
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'>  <span class="nv">PATH</span><span class="o">=</span><span class="nv">$NODE_BIN_DIR</span>:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">exec </span>forever --sourceDir <span class="nv">$APPLICATION_DIRECTORY</span> --append -l <span class="nv">$LOG</span> <span class="se">\</span>
</span><span class='line'>    --minUptime 5000 --spinSleepTime 2000 start <span class="nv">$APPLICATION_START</span>
</span><span class='line'>end script
</span><span class='line'>
</span><span class='line'>pre-stop script
</span><span class='line'>  <span class="nv">PATH</span><span class="o">=</span><span class="nv">$NODE_BIN_DIR</span>:<span class="nv">$PATH</span>
</span><span class='line'>  <span class="nb">exec </span>forever stop <span class="nv">$APPLICATION_START</span> &gt;&gt; <span class="nv">$LOG</span>
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>

<p>Now you can start, restart, and stop your app like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service myapp start
</span><span class='line'>sudo service myapp restart
</span><span class='line'>sudo service myapp stop
</span></code></pre></td></tr></table></div></figure>

<h2 id="ta-da!">Ta-Da!</h2>

<p>Now your environment is ready to rock&#39;n&#39;rollâ€”you just need to figure out a deployment methodology. Perhaps I&#39;ll cover an automated build/deployment process for a <abbr title="Mongo, Express, Angular, Node.js">MEAN</abbr> stack app next?</p>

<p>Post a comment if you have any questions, and I&#39;ll be happy to do what I can to help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning an existing installation of Octopress]]></title>
    <link href="http://kvcrawford.github.io/blog/2013/10/30/cloning-an-existing-installation-of-octopress/"/>
    <updated>2013-10-30T14:16:00-07:00</updated>
    <id>http://kvcrawford.github.io/blog/2013/10/30/cloning-an-existing-installation-of-octopress</id>
    <content type="html"><![CDATA[<p>The way Octopress deploys to Github Pages is a little funky. When you setup your blog for deployment to Github Pages, a second copy of the repo is instantiated in <code>./_deploy</code>, and is checked out to the <code>master</code> branch.</p>

<p>You create and edit posts in the <code>source</code> branch, in your project root. During deployment, your site gets generated, and the updates copied to <code>_deploy</code>. From there, a commit is made to <code>master</code>, and a git push is performed, updating the website.</p>

<p>When you clone your blog to a different computer, you need to make sure it is setup in the same way, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Assuming that you have your Ruby environment configured</span>
</span><span class='line'><span class="nv">$ </span>git clone -b <span class="nb">source </span>git@github.com:username/username.github.io.git username.github.io
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>username.github.io
</span><span class='line'><span class="nv">$ </span>git clone -b master git@github.com:username/username.github.io.git _deploy
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>

<p>Thank you to <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">zerosharp.com</a> and <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org</a> for helping me figure that one out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World]]></title>
    <link href="http://kvcrawford.github.io/blog/2013/09/20/hello-world/"/>
    <updated>2013-09-20T08:21:00-07:00</updated>
    <id>http://kvcrawford.github.io/blog/2013/09/20/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Well let&#39;s get started then, shall we?&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>
